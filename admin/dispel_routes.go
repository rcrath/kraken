// generated by dispel v1; DO NOT EDIT

package admin

import (
	"net/url"
)

// RouteRegisterer is the interface implemented by objects that can register a name for a route path.
type RouteRegisterer interface {
	RegisterRoute(path string, name string)
}

// RouteReverser is the interface implemented by objects that can retrieve the url of a route based on
// its registered name and the route param names and values.
type RouteReverser interface {
	ReverseRoute(name string, params ...string) *url.URL
}

// RouteLocation is the interface implemented by objects that can return an url for a route, using
// a RouteReverser.
type RouteLocation interface {
	Location(RouteReverser) *url.URL
}

// registerRoutes uses rr to register the routes by path and name.
func registerRoutes(rr RouteRegisterer) {
	rr.RegisterRoute("/fileservers", routeFileservers)
	rr.RegisterRoute("/servers", routeServers)
	rr.RegisterRoute("/servers/{server-port}", routeServersOne)
	rr.RegisterRoute("/servers/{server-port}/mounts", routeServersOneMounts)
	rr.RegisterRoute("/servers/{server-port}/mounts/{mount-id}", routeServersOneMountsOne)
}

const (
	routeFileservers         = "fileservers"
	routeServers             = "servers"
	routeServersOne          = "servers.one"
	routeServersOneMounts    = "servers.one.mounts"
	routeServersOneMountsOne = "servers.one.mounts.one"
)

type (
	RouteFileservers struct{}
	RouteServers     struct{}
	RouteServersOne  struct {
		ServerPort string
	}
	RouteServersOneMounts struct {
		ServerPort string
	}
	RouteServersOneMountsOne struct {
		ServerPort string
		MountId    string
	}
)

func (r RouteFileservers) Location(rr RouteReverser) *url.URL {
	return rr.ReverseRoute(routeFileservers)
}
func (r RouteServers) Location(rr RouteReverser) *url.URL {
	return rr.ReverseRoute(routeServers)
}
func (r RouteServersOne) Location(rr RouteReverser) *url.URL {
	return rr.ReverseRoute(routeServersOne, "server-port", r.ServerPort)
}
func (r RouteServersOneMounts) Location(rr RouteReverser) *url.URL {
	return rr.ReverseRoute(routeServersOneMounts, "server-port", r.ServerPort)
}
func (r RouteServersOneMountsOne) Location(rr RouteReverser) *url.URL {
	return rr.ReverseRoute(routeServersOneMountsOne, "server-port", r.ServerPort, "mount-id", r.MountId)
}
