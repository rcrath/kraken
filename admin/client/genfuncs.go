// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"

	"github.com/vincent-petithory/dispel"
)

const tmpl = `// generated by {{ .Prgm }}; DO NOT EDIT

package {{ .PkgName }}

import (
	"net/http"

	"github.com/vincent-petithory/kraken/admin"
)

{{ range .Routes.ByResource }}{{ $route := . }}{{ range .Methods }}{{ $method := . }}{{ $io := index $route.MethodRouteIOMap . }}{{/*
*/}}func (c *Client) {{ handlerFuncName . $route.Name | capitalize }}({{ range $route.RouteParams }}{{ .Varname }} string,{{end}}{{ if $io.InType }}dataIn {{ printSmartDerefType $io.InType | adminPkg }}{{end}}) {{ if $io.OutType }}({{ printSmartDerefType $io.OutType | adminPkg }}, error){{else}}error{{end}}{
	{{ if $io.OutType }}var dataOut {{ printTypeName $io.OutType | adminPkg }}{{end}}
	if err := c.doRequestAndDecodeResponse(
		"{{ $method }}",
		admin.Route{{ symbolName $route.Name }}{ {{ range $route.RouteParams }}{{ symbolName .Varname }}: {{ .Varname }}, {{end}} },
		{{ if $io.InType }}dataIn{{else}}nil{{end}},
		{{ if eq $method "POST" }}http.StatusCreated{{else}}http.StatusOK{{end}},
		{{ if $io.OutType }}&dataOut{{else}}nil{{end}},
	); err != nil {
		return {{ if $io.OutType }}nil{{end}}, err
	}
	return {{ if $io.OutType }}{{ addrIfNeed (printSmartDerefType $io.OutType)}}dataOut, {{end}}nil
}

{{end}}{{end}}`

func main() {
	if os.Getenv("GOFILE") == "" || os.Getenv("GOPACKAGE") == "" {
		log.Fatal("This should be run only by go generate")
	}
	f, err := os.Open("../schema.json")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	var schema dispel.Schema
	if err := json.NewDecoder(f).Decode(&schema); err != nil {
		log.Fatal(err)
	}

	schemaParser := &dispel.SchemaParser{RootSchema: &schema}

	routes, err := schemaParser.ParseRoutes()
	if err != nil {
		switch t := err.(type) {
		case dispel.InvalidSchemaError:
			log.Fatalf("Schema: %#v\nMsg: %s", t.Schema, t.Msg)
		default:
			log.Fatal(err)
		}
	}

	// Prepare context for template
	ctx := &dispel.TemplateContext{
		Prgm:    "genfuncs",
		PkgName: os.Getenv("GOPACKAGE"),
		Routes:  routes,
	}

	funcMap := dispel.NewTemplateFuncMap(schemaParser)
	funcMap["adminPkg"] = func(symbol string) string {
		// check it's an exported symbol
		for _, r := range symbol {
			if !unicode.IsLetter(r) {
				continue
			}
			if unicode.IsLower(r) {
				return symbol
			}
			break
		}

		var s string
		switch {
		case strings.HasPrefix(symbol, "*"):
			s = "*admin." + symbol[1:]
		case strings.HasPrefix(symbol, "[]"):
			s = "[]admin." + symbol[2:]
		default:
			s = "admin." + symbol
		}
		return s
	}
	funcMap["addrIfNeed"] = func(symbol string) string {
		if strings.HasPrefix(symbol, "*") {
			return "&"
		}
		return ""
	}

	t, err := template.New("_").Funcs(funcMap).Parse(tmpl)
	if err != nil {
		log.Fatal(err)
	}

	var buf bytes.Buffer
	if err := t.Execute(&buf, ctx); err != nil {
		log.Fatal(err)
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Println(buf.String())
		log.Fatal(err)
	}

	if err := ioutil.WriteFile("funcs.gen.go", src, 0666); err != nil {
		log.Fatal(err)
	}
}
