// generated by genfuncs; DO NOT EDIT

package client

import (
	"net/http"

	"github.com/vincent-petithory/kraken/admin"
)

func (c *Client) GetFileservers() (admin.ListAllFileServerTypeOut, error) {
	var dataOut admin.ListAllFileServerTypeOut
	if err := c.doRequestAndDecodeResponse(
		"GET",
		admin.RouteFileservers{},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return dataOut, nil
}

func (c *Client) GetServers() (admin.ListAllServerOut, error) {
	var dataOut admin.ListAllServerOut
	if err := c.doRequestAndDecodeResponse(
		"GET",
		admin.RouteServers{},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return dataOut, nil
}

func (c *Client) PostServers(dataIn *admin.CreateRandomServerIn) (*admin.Server, error) {
	var dataOut admin.Server
	if err := c.doRequestAndDecodeResponse(
		"POST",
		admin.RouteServers{},
		dataIn,
		http.StatusCreated,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) DeleteServers() (admin.DeleteAllServerOut, error) {
	var dataOut admin.DeleteAllServerOut
	if err := c.doRequestAndDecodeResponse(
		"DELETE",
		admin.RouteServers{},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return dataOut, nil
}

func (c *Client) GetServersOne(serverPort string) (*admin.Server, error) {
	var dataOut admin.Server
	if err := c.doRequestAndDecodeResponse(
		"GET",
		admin.RouteServersOne{ServerPort: serverPort},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) PutServersOne(serverPort string, dataIn *admin.CreateServerIn) (*admin.Server, error) {
	var dataOut admin.Server
	if err := c.doRequestAndDecodeResponse(
		"PUT",
		admin.RouteServersOne{ServerPort: serverPort},
		dataIn,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) DeleteServersOne(serverPort string) (*admin.Server, error) {
	var dataOut admin.Server
	if err := c.doRequestAndDecodeResponse(
		"DELETE",
		admin.RouteServersOne{ServerPort: serverPort},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) GetServersOneMounts(serverPort string) (admin.ListAllMountOut, error) {
	var dataOut admin.ListAllMountOut
	if err := c.doRequestAndDecodeResponse(
		"GET",
		admin.RouteServersOneMounts{ServerPort: serverPort},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return dataOut, nil
}

func (c *Client) PostServersOneMounts(serverPort string, dataIn *admin.CreateMountIn) (*admin.Mount, error) {
	var dataOut admin.Mount
	if err := c.doRequestAndDecodeResponse(
		"POST",
		admin.RouteServersOneMounts{ServerPort: serverPort},
		dataIn,
		http.StatusCreated,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) DeleteServersOneMounts(serverPort string) (admin.DeleteAllMountOut, error) {
	var dataOut admin.DeleteAllMountOut
	if err := c.doRequestAndDecodeResponse(
		"DELETE",
		admin.RouteServersOneMounts{ServerPort: serverPort},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return dataOut, nil
}

func (c *Client) GetServersOneMountsOne(serverPort string, mountId string) (*admin.Mount, error) {
	var dataOut admin.Mount
	if err := c.doRequestAndDecodeResponse(
		"GET",
		admin.RouteServersOneMountsOne{ServerPort: serverPort, MountId: mountId},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}

func (c *Client) DeleteServersOneMountsOne(serverPort string, mountId string) (*admin.Mount, error) {
	var dataOut admin.Mount
	if err := c.doRequestAndDecodeResponse(
		"DELETE",
		admin.RouteServersOneMountsOne{ServerPort: serverPort, MountId: mountId},
		nil,
		http.StatusOK,
		&dataOut,
	); err != nil {
		return nil, err
	}
	return &dataOut, nil
}
